
import express from "express";
import { Delete, Get, Post, Route, Body, Path, Tags } from "tsoa";
import Cache from "./Cache";
import { WypozyczalniaAsync } from "./Wypozyczalnia";
import Samochod from "./Samochod";

/*
interface IBorrow {
	numer: number;
	pasazerowie: number;
	cena: number;
}


@Route("borrows")
@Tags("Borrow")
class BorrowController {
	wyp: WypozyczalniaAsync;
	constructor(wyp: WypozyczalniaAsync) {
		this.wyp = wyp;
	}
	

	@Post("/")
	public async Create(@Body() b: IBorrow) {
		var s = new Samochod(b.numer, b.pasazerowie, b.cena);
		return this.cache.write(s);
	}


	@Get("/:id")
	public async Read(@Path() id: string): Promise<Samochod|null> {
		const s = this.cache.read(+id);
		if(s === undefined) {
			return null;
		} else {
			return ((s as unknown) as Samochod);
		}
	}

	@Get("/")
	public async ReadAll(): Promise<Samochod[]> {
		return this.cache.get_all();
	}


	@Post("/update")
	public async Update(@Body() b: IBorrow) {
		var s = await this.cache.read(b.numer);
		if(s !== undefined) {
			s.pasazerowie = b.pasazerowie;
			s.cena = b.cena;
			await this.cache.write(s);
		}
	}


	@Delete("/:id")
	public async Delete(@Path() id: string) {
		return this.cache.remove(Number(id));
	}

	@Delete("/all")
	public async DeleteAll() : Promise<boolean> {
		await this.cache.remove_all();
		return true;
	}
	
}
*/

const CreateBorrowController = function(wyp: WypozyczalniaAsync) {
	const router = express.Router();
	/*
	router.post("/", async (req, res) => {
		const co = new BorrowController(cache);
		const r = await co.Create(req.body);
		return res.send(r);
	});
	router.get("/:id", async (req, res) => {
		const co = new BorrowController(cache);
		const r = await co.Read(req.params.id);
		return res.send(r);
	});
	router.get("/", async (req, res) => {
		const co = new BorrowController(cache);
		const r = await co.ReadAll();
		return res.send(r);
	});
	router.post("/", async (req, res) => {
		const co = new BorrowController(cache);
		const r = await co.Update(req.body);
		return res.send(r);
	});
	router.delete("/:id", async (req, res) => {
		const co = new BorrowController(cache);
		const r = await co.Delete(req.params.id);
		return res.send(r);
	});
	router.delete("/all", async (req, res) => {
		const co = new BorrowController(cache);
		const r = await co.DeleteAll();
		return res.send(r);
	});
	*/
	return router;
};

export default CreateBorrowController;